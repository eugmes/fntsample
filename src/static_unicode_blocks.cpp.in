#include "static_unicode_blocks.h"
#include <cassert>

using namespace std;

struct raw_block {
    uint32_t start;
    uint32_t end;
    const char *name;
};

static const raw_block raw_blocks[] = {
@BLOCKS_DATA@
};

static_unicode_blocks::~static_unicode_blocks()
{
}

size_t static_unicode_blocks::size() const
{
    return @BLOCKS_SIZE@;
}

ssize_t static_unicode_blocks::find(uint32_t codepoint) const
{
    for (size_t i = 0; i < @BLOCKS_SIZE@; i++) {
        if (raw_blocks[i].start <= codepoint && codepoint <= raw_blocks[i].end) {
            return i;
        }
    }

    return -1;
}

unicode_blocks::block static_unicode_blocks::operator[](size_t index) const
{
    assert(index <= @BLOCKS_SIZE@);
    const raw_block *b = &raw_blocks[index];
    return block{b->start, b->end, b->name};
}
